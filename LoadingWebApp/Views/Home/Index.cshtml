<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link href="~/Content/Site.css" rel="stylesheet" />
    <script src="http://cdnjs.cloudflare.com/ajax/libs/coffee-script/1.7.1/coffee-script.min.js"></script>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/seen.min.js"></script>
</head>
<body>
    <div class="title">Available goods:</div>

    <div class="test-combination-info comment"> Test combination: Fridge - 15, Washing machine - 20, Electric kettle - 40 for Container type A</div>

    <div id="goods"></div>

    <div class="title">Available containers:</div>
    <div id="containers"></div>

    <div class="operation-error"></div>

    <input id="placeOrderButton" type="button" value="Place order" />

    <div class="placing-plan-menu">
        <div class="title"> PLACING PLAN</div><br />
        <div class="execution-percent-info">Execution percent:&nbsp;<span id="execution-percent"></span>&nbsp;%</div>
        <div> Input the number of row, to see it detailed: </div>
        <div class="placing-plan-menu-content">
            <div> Row:&nbsp;&nbsp; <input type="text" id="lineNumberInput" placeholder="0" /></div>
            <div> from: &nbsp;&nbsp;<span id="linesTotalQuantity"></span></div>
            <div><input type="button" id="filterRender" value="Show" /></div>
            <div><input type="button" id="resetRender" value="Reset" /></div>
        </div>
        <div class="placing-plan-menu-error"></div>
    </div>

    <div class="placing-plan-render-table">
        <table>
            <tr><td>Perspective view</td></tr>
            <tr><td><canvas width="1000" height="800" id="seen-canvas-0"></canvas></td></tr>
        </table>
        <table>
            <tr>
                <td><canvas width="350" height="350" id="seen-canvas-1"></canvas></td>
                <td><canvas width="350" height="350" id="seen-canvas-2"></canvas></td>
            </tr>
            <tr><td>Top view</td><td>Front View</td></tr>
            <tr>
                <td><canvas width="350" height="350" id="seen-canvas-3"></canvas></td>
                <td><canvas width="350" height="350" id="seen-canvas-4"></canvas></td>
            </tr>
            <tr><td>Back view</td><td>Right view</td></tr>
        </table>
    </div>
</body>
</html>
<script type="text/coffeescript">
    # JS functions
    `$(document).ready(function () {
        $('.placing-plan-menu').hide();
        $('.placing-plan-render-table').hide();

        $.ajax({
            url: '/api/data/boxes',
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                $.each(data, function (index) {
                    $('#goods').append('<div class="item"><div class="item-name">' +
                        data[index].Name +
                        '</div><div class="item-order-quantity"><input type="text" placeholder="Put item order quantity"/></div></div>');
                });
            },
            error: function (message) {
                $(".operation-error").text(message.responseText);
            }
        });

        $.ajax({
            url: '/api/data/containers',
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                $.each(data, function (index) {
                    $('#containers').append('<div class="item"><input type="radio" value="' + data[index].Name + '">&nbsp;&nbsp;&nbsp;' + data[index].Name + '</div>');
                });
            },
            error: function (message) {
                $(".operation-error").text(message.responseText);
            }
        });
    });

    $(document).on("click", "#placeOrderButton", function () {
        $(".operation-error").text("");

        var dataToSend = {
            "Boxes": collectGoodsData(),
            "Container": collectContainerData()
        };

        if (dataToSend["Container"] === "") return;

        $.ajax({
            url: '/api/placingPlan',
            type: 'POST',
            contentType: "application/json",
            data: JSON.stringify(dataToSend),
            success: function (data) {
                $('.placing-plan-menu').show();
                $('.placing-plan-render-table').show();
                $("#linesTotalQuantity").text(data.Boxes[data.Boxes.length-1].LineNumber);
                $("#execution-percent").text(data.ExecutionPercent);
                renderingData = data;
                render(-1);
            },
            error: function (data) {
                var errorText = "";
                if (data["responseJSON"]["ExceptionMessage"] === undefined) errorText = data["responseJSON"]["Message"];
                else errorText = data["responseJSON"]["ExceptionMessage"];
                $(".operation-error").text("Operation failed. " + errorText);
            }
        });
    });

    $(document).on("click", "#resetRender", function () {
        $(".renderError").text("");
        render(-1);
    });

    $(document).on("click", "#filterRender", function() {
        $(".renderError").text("");

        var lineNumber = parseInt($("#lineNumberInput").val().trim());

        if (lineNumber < 0 || lineNumber > renderingData.Boxes[renderingData.Boxes.length-1].LineNumber)
            $(".renderError").text("Invalid line number");
        else render(lineNumber);
    });

    function collectGoodsData() {
        var dataDictionary = {};
        var goods = $('#goods .item');

        $.each(goods, function (key, value) {
            var itemValue = $(value).find('.item-order-quantity input').val();

            if (itemValue !== "" || parseInt(itemValue) > 0) {
                var itemName = $(value).find('.item-name').text().trim();
                dataDictionary[itemName] = parseInt(itemValue);
            }
        });

        return dataDictionary;
    }

    function collectContainerData() {
        var containers = $('#containers .item');

        var checkedContainerName = "";

        $.each(containers, function (key, value) {
            var isChecked = $(value).find('input').is(':checked');

            if (isChecked) {
                checkedContainerName = $(value).text().trim();
            }
        });

        if (checkedContainerName === "") {
            $(".operation-error").text("No container is chosen.");
        }

        return checkedContainerName;
    }`

    # CoffeeScript functions

    dims = [
      [1000, 800]
      [100, 600]
      [600, 600]
      [100, 550]
      [600, 550]
    ]

    renderingData = {}

    selectBoxesOfALine = (lineNumber) ->
      if lineNumber < 0 or lineNumber > renderingData.Boxes[renderingData.Boxes.length-1].LineNumber
        renderingData
      else
        containerData = renderingData.Container
        sortedData = (box for box in renderingData.Boxes when box.LineNumber == lineNumber)
        toRenderData = {
          Boxes : sortedData
          Container : containerData
        }
        toRenderData

    render = (lineNumber) ->
      dataToRender = selectBoxesOfALine(lineNumber)
      create3DModel(dataToRender)
      return

    create3DModel = (renderingData) ->
      # creating model
      model = seen.Models.default()
      model.add(seen.Shapes.rectangle(seen.P(0, 0, 0), seen.P(renderingData.Container.Width, renderingData.Container.Length, 2)))
      for item in renderingData.Boxes
        model.add(seen.Shapes.rectangle(seen.P(item.Xo + 3, item.Yo + 3, item.Zo + 3), seen.P(item.X1 - 3, item.Y1 - 3, item.Z1 - 3)).fill(item.Color))
      # creating scenes
      scenes = [0...5].map (i) -> new seen.Scene
        model     : model
        viewport  : seen.Viewports.center(dims[i]...)
      scenes[0].camera.scale(0.9) # perspective view
      scenes[1].camera.scale(0.7) # top view
      scenes[2].camera.scale(0.7) # front view
      scenes[2].camera.rotx(-Math.PI/2)
      scenes[2].camera.roty(-Math.PI)
      scenes[3].camera.scale(0.9) # back view
      scenes[3].camera.rotx(-Math.PI/2)
      scenes[4].camera.scale(0.9) # side view
      scenes[4].camera.rotx(-Math.PI/2)
      scenes[4].camera.roty(Math.PI/2)
      # rendering scenes
      contexts = scenes.map (scene,i) -> seen.Context("seen-canvas-#{i}", scene)
      mainContext = seen.Context('seen-canvas-0', scenes[0]).render()
      renderAll = -> context.render() for context in contexts
      renderAll()
      # dragging
      dragger = new seen.Drag('seen-canvas-0')
      dragger.on('drag.rotate', (e) ->
        xform = seen.Quaternion.xyToTransform(e.offsetRelative...)
        model.transform(xform)
        mainContext.render()
      )
</script>